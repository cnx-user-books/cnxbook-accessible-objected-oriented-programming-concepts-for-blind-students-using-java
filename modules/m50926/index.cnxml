<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Jbs2020-Square Wave Sound</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m50926</md:content-id>
  <md:title>Jbs2020-Square Wave Sound</md:title>
  <md:abstract>This module explains how to write a program that creates an audio output consisting of a 1000 Hz square wave in a format that is accessible to blind students.</md:abstract>
  <md:uuid>99dc82c8-ad2c-4197-8a00-9dad101896d7</md:uuid>
</metadata>

<content>
















<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1000" target-id="Preface">

Preface

</link>


	

<list id="ul1001" list-type="bulleted">

		

<item id="li1001">
<link id="a1001" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1002" list-type="bulleted">


			

<item id="li1002">
<link id="a1002" target-id="Listings">

Listings

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>



	

<item id="li1003">
<link id="a1003" target-id="General_background_information">

General background information

</link>


<list id="ul1003" list-type="bulleted">

		

<item id="li1004">
<link id="a1004" target-id="What_is_sound">

What is sound?

</link>


</item>


		

<item id="li1005">
<link id="a1005" target-id="White_noise">

White noise

</link>


</item>


		

<item id="li1006">
<link id="a1006" target-id="A_square_wave">

A square wave

</link>


<list id="ul1004" list-type="bulleted">

			

<item id="li1007">
<link id="a1007" target-id="An_audio_graph_of_a_square_wave">

An audio graph of a square wave

</link>


</item>


			

<item id="li1008">
<link id="a1008" target-id="Points_on__graph">

Points on graph

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1009">
<link id="a1009" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


<list id="ul1005" list-type="bulleted">

		

<item id="li1010">
<link id="a1010" target-id="Three_classes_are_unchanged">

Three classes are unchanged

</link>


</item>


		

<item id="li1011">
<link id="a1011" target-id="The_class_named_MusicComposer05">

The class named MusicComposer05

</link>


</item>


		

<item id="li1012">
<link id="a1012" target-id="The_class_named_SquareWave">

The class named SquareWave

</link>


<list id="ul1006" list-type="bulleted">

			

<item id="li1013">
<link id="a1013" target-id="Beginning_of_the_class_named_SquareWave">

Beginning of the class named SquareWave

</link>


</item>



			

<item id="li1014">
<link id="a1014" target-id="Beginning_of_the_getMelody_method">

Beginning of the getMelody method

</link>


</item>


			

<item id="li1015">
<link id="a1015" target-id="Required_audio_data_format">

Required audio data format

</link>


			
			

<list id="ul1007" list-type="bulleted">

				

<item id="li1016">
<link id="a1016" target-id="Monaural_channels__1">

Monaural, channels = 1

</link>


</item>


				

<item id="li1017">
<link id="a1017" target-id="Stereo_channels__2">

Stereo, channels = 2

</link>


</item>


			

</list>


</item>



			
			

<item id="li1018">
<link id="a1018" target-id="Generating_the_square_wave">

Generating the square wave

</link>


<list id="ul1008" list-type="bulleted">

				

<item id="li1019">
<link id="a1019" target-id="Local_working_variables">

Local working variables

</link>


</item>


				

<item id="li1020">
<link id="a1020" target-id="Set_the_frequency_of_the_square_wave">

Set the frequency of the square wave

</link>


</item>


				

<item id="li1021">
<link id="a1021" target-id="Decompose_into_two_bytes">

Decompose val into two bytes

</link>


</item>


				

<item id="li1022">
<link id="a1022" target-id="Populate_the_audio_data_array">

Populate the audio data array

</link>


</item>


			

</list>


			

</item>


		

</list>


		

</item>


	

</list>


	

</item>



	

<item id="li1023">
<link id="a1023" target-id="Run_the_program">

Run the program

</link>


</item>



	

<item id="li1024">
<link id="a1024" target-id="Miscellaneous">

Miscellaneous

</link>


</item>


	

<item id="li1025">
<link id="a1025" target-id="Complete_program_listing">

Complete program listings

</link>


</item>




</list>


	
	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	

<para id="p1000">
This module is part of a collection titled 

<emphasis id="strong1000" effect="bold">
Accessible 
	Objected-Oriented Programming Concepts for Blind Students using Java

</emphasis>
. 
	It explains how to write a program that creates an audio output consisting 
	of a 1000 Hz square wave.

</para>


	

<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1001">
I recommend that you open another copy of this module in a separate 
browser window and use the following links to easily find the listings while you are reading about them.

</para>


	

<section id="h31000">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>


	

<list id="ul1009" list-type="bulleted">

		

<item id="li1026">
<link id="a1026" target-id="Listing_1">

Listing 1

</link>

. Beginning of the class named SquareWave.

</item>


		

<item id="li1027">
<link id="a1027" target-id="Listing_2">

Listing 2

</link>

. Beginning of the getMelody method.

</item>


		

<item id="li1028">
<link id="a1028" target-id="Listing_3">

Listing 3

</link>

. Local working variables. 

</item>


		

<item id="li1029">
<link id="a1029" target-id="Listing_4">

Listing 4

</link>

. Set the frequency of the square wave.

</item>


		

<item id="li1030">
<link id="a1030" target-id="Listing_5">

Listing 5

</link>

. Decompose val into two bytes.

</item>


		

<item id="li1031">
<link id="a1031" target-id="Listing_6">

Listing 6

</link>

. Populate the audio data array.

</item>


		

<item id="li1032">
<link id="a1032" target-id="Listing_7">

Listing 7

</link>

. The class named AudioFormatParameters01.

</item>


		

<item id="li1033">
<link id="a1033" target-id="Listing_8">

Listing 8

</link>

. The class named AudioPlayOrFile01.

</item>


		

<item id="li1034">
<link id="a1034" target-id="Listing_9">

Listing 9

</link>

. The class named AudioSignalGenerator02.

</item>


		

<item id="li1035">
<link id="a1035" target-id="Listing_10">

Listing 10

</link>

. The class named MusicComposer05.

</item>


		

<item id="li1036">
<link id="a1036" target-id="Listing_11">

Listing 11

</link>

. The class named SquareWave.

</item>


	

</list>



	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="General_background_information" effect="bold">

General 
	background information

</emphasis>


</title>




<section id="h21001">
<title>
<emphasis id="What_is_sound" effect="bold">

What is sound

</emphasis>

?

</title>




<para id="p1002">
An earlier module titled 

<emphasis id="em1000" effect="italics">
Jbs2000-What is Sound? 

</emphasis>
explained some of 
the physical characteristics of sound. It also explained that sound can be 
produced when a computer program causes the diaphragms on audio speakers 
connected to the computer to move back and forth or vibrate.

</para>




</section>
<section id="h21002">
<title>
<emphasis id="White_noise" effect="bold">

White noise

</emphasis>


</title>




<para id="p1003">
An earlier module titled 

<emphasis id="em1001" effect="italics">
Jbs2010-Your First Sound Program

</emphasis>
 explained 
how a random number generator can be used in a program to cause the speaker 
diaphragms to move back and forth or vibrate in a random fashion producing what 
is commonly called white noise or pink noise. 

<emphasis id="em1002" effect="italics">
(Click 

</emphasis>



<link id="a1037" url="WhiteNoise.au">


<emphasis id="em1003" effect="italics">
WhiteNoise

</emphasis>
</link>


<emphasis id="em1004" effect="italics">
 to hear a sample of white or 
pink noise. You should be able to play the audio file with any standard media 
player that can handle the AU file type. In case you are on the OpenStax site 
and you are unable to download the audio file, click the 

<emphasis id="strong1001" effect="bold">
Legacy Site

</emphasis>
 link at the 
top of this page to switch over to the same module on the Legacy site.You should 
be able to download the audio file from there.)

</emphasis>
 

</para>




<para id="p1004">
White noise is totally unorganized or random. Beginning with this module, we 
will start applying more organization to the sound until we reach the point 
where we can write a program that simulates a player piano. 

<emphasis id="em1005" effect="italics">
(Click 

</emphasis>



<link id="a1038" url="Greensleeves.au">


<emphasis id="em1006" effect="italics">
Greensleeves

</emphasis>
</link>


<emphasis id="em1007" effect="italics">
 to hear a simulation of 
a player piano.)

</emphasis>
</para>




</section>
<section id="h21003">
<title>
<emphasis id="A_square_wave" effect="bold">

A square wave

</emphasis>


</title>




<para id="p1005">
In this module, we will write a program that attempts to cause the diaphragms 
to move back and forth instantaneously switching from one position to another by creating 
audio data based on a square wave. 

<emphasis id="em1008" effect="italics">
(Click 

<link id="a1039" url="SquareWave.au">

SquareWave

</link>

 to hear a sample of 
a 1000 Hz square wave. A future module will compare the sound of a 1000 Hz 
square wave with the sound of a pure 1000 Hz sinusoidal tone.)

</emphasis>
 

</para>




<section id="h31001">
<title>
<emphasis id="An_audio_graph_of_a_square_wave" effect="bold">

An audio graph of a square wave

</emphasis>


</title>




<para id="p1006">
I explained the concept of an 

<emphasis id="em1009" effect="italics">
audio graph

</emphasis>
 in the earlier module titled 

<emphasis id="em1010" effect="italics">

Jbs2000-What is Sound?

</emphasis>
 but I will explain it again here for your 
convenience. 

<emphasis id="em1011" effect="italics">
(Click 

<link id="a1040" url="AudioGraphSquareWave.au">

AudioGraphSquareWave

</link>

 to hear an 
audio representation of the graph of a square wave.)

</emphasis>
</para>




<para id="p1007">
This audio graph file contains an 8-second melody consisting of 32 uniformly spaced 
pulses at different frequencies. The frequencies 

<emphasis id="em1012" effect="italics">
(pitches)

</emphasis>
 of the 
pulses are centered on middle-C 

<emphasis id="em1013" effect="italics">
(261.63 Hz)

</emphasis>
. The frequency deviation 
from middle-C versus time is based on a square wave function with a frequency of 
0.5 Hz. 

</para>




</section>
<section id="h31002">
<title>
<emphasis id="Points_on__graph" effect="bold">

Points on graph

</emphasis>


</title>




<para id="p1008">
Each pulse represents one point on a graph of the square wave. Pulses with 
frequencies at or above middle-C are delivered to the left speaker. Pulses with 
frequencies below middle-C are delivered to the right speaker. 

</para>




<para id="p1009">
The audio output can be thought of as an audio representation of a graph of a 
square wave. Pulses with frequencies above middle-C represent points on the 
positive lobe of the square wave. Increasing pitch represents increasing amplitude 
on the graph of the square wave. 

</para>




<para id="p1010">
Pulses with frequencies below middle-C can be thought of as representing 
points on the negative lobe of the square wave. In this case, decreasing pitch 
represents points on the square wave that are further from the horizontal axis in 
the negative direction. 

</para>




<para id="p1011">
Pulses with a frequency of middle-C can be thought of as representing points 
on the horizontal axis with a value of zero but there are no points on the 
horizontal axis for a square wave. 

</para>




<para id="p1012">
Four complete cycles of the 0.5 Hz square wave are represented by the 32 pulses 
in the 8-second melody.

</para>




<para id="p1013">
Hopefully, by listening to this audio file, you can get an idea of the shape 
of a square wave.

</para>


	
	

</section>
</section>
</section>
<section id="h11003">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	

<para id="p1014">
<emphasis id="This_program_requires" effect="bold">

This 
	program requires

</emphasis>

 the following five classes:

</para>




<list id="ul1010" list-type="bulleted">

	

<item id="li1037">
AudioFormatParameters01 

<emphasis id="em1014" effect="italics">
(see 

<link id="a1041" target-id="Listing_7">

Listing 7

</link>

)

</emphasis>
</item>


	

<item id="li1038">
AudioPlayOrFile01 

<emphasis id="em1015" effect="italics">
(see 

<link id="a1042" target-id="Listing_8">

Listing 8

</link>

)

</emphasis>
</item>


	

<item id="li1039">
AudioSignalGenerator02 

<emphasis id="em1016" effect="italics">
(see 

<link id="a1043" target-id="Listing_9">

Listing 9

</link>

)

</emphasis>
</item>


	

<item id="li1040">
MusicComposer05 

<emphasis id="em1017" effect="italics">
(see 

<link id="a1044" target-id="Listing_10">

Listing 10

</link>

)

</emphasis>
</item>


	

<item id="li1041">
SquareWave 

<emphasis id="em1018" effect="italics">
(see 

<link id="a1045" target-id="Listing_11">

Listing 11

</link>

)

</emphasis>
</item>




</list>




<section id="h21004">
<title>
<emphasis id="Three_classes_are_unchanged" effect="bold">

Three classes are unchanged

</emphasis>


</title>




<para id="p1015">
I won't bore you by repeating the discussion from earlier modules. The first 
three classes in the 

<link id="a1046" target-id="This_program_requires">

above list

</link>

 are completely unchanged from the module titled


<emphasis id="em1019" effect="italics">
Jbs2010-Your First Sound Program

</emphasis>
. Therefore, I won't discuss them 
further 
in this module.

</para>




</section>
<section id="h21005">
<title>
<emphasis id="The_class_named_MusicComposer05" effect="bold">

The class named MusicComposer05

</emphasis>


</title>

 


<para id="p1016">
The class named 

<emphasis id="strong1002" effect="bold">
MusicComposer05

</emphasis>
 differs from the previous 
version only in the following respects:

</para>




<list id="ul1011" list-type="bulleted">

	

<item id="li1042">
Changes in the explanatory comments.

</item>


	

<item id="li1043">
Replacement of the term 

<emphasis id="strong1003" effect="bold">
WhiteNoise

</emphasis>
 with the term 

<emphasis id="strong1004" effect="bold">
SquareWave

</emphasis>
.

</item>


	

<item id="li1044">
Replacement of the term 

<emphasis id="strong1005" effect="bold">
whiteNoise

</emphasis>
 with the term 

<emphasis id="strong1006" effect="bold">
squareWave

</emphasis>
.

</item>




</list>




<para id="p1017">
Therefore, I also won't discuss this class further in this module.

</para>




</section>
<section id="h21006">
<title>
<emphasis id="The_class_named_SquareWave" effect="bold">

The class named SquareWave

</emphasis>


</title>




<para id="p1018">
A complete listing of the class named 

<emphasis id="strong1007" effect="bold">
SquareWave

</emphasis>
 is provided in 


<link id="a1047" target-id="Listing_11">

Listing 11

</link>

. I 
will break this class down and explain it in fragments.

</para>




<section id="h31003">
<title>
<emphasis id="Beginning_of_the_class_named_SquareWave" effect="bold">

Beginning of the class 
named SquareWave

</emphasis>


</title>




<para id="p1019">
The sound that you heard when you listened to the audio file named


<link id="a1048" url="SquareWave.au">

SquareWave

</link>

 
was produced by the 

<emphasis id="strong1008" effect="bold">
getMelody

</emphasis>
 method of the 

<emphasis id="strong1009" effect="bold">

SquareWave

</emphasis>
 class. The 

<emphasis id="strong1010" effect="bold">
SquareWave

</emphasis>
 class begins in


<link id="a1049" target-id="Listing_1">

Listing 1

</link>

 and the 

<emphasis id="strong1011" effect="bold">
getMelody

</emphasis>
 method begins in


<link id="a1050" target-id="Listing_2">

Listing 2

</link>

.

</para>




<para id="p1020">
The code in 

<link id="a1051" target-id="Listing_1">

Listing 1

</link>

 differs from the corresponding 

<emphasis id="strong1012" effect="bold">
WhiteNoise

</emphasis>
 
code from the earlier module only with respect to the name of the class. 
Therefore, I won't discuss it further.

</para>




	

<table id="table1000" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

. Beginning of the class named SquareWave.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">



<code id="pre1000" display="block">
import java.io.*;
import java.nio.*;
import java.util.*;

public class SquareWave extends AudioSignalGenerator02{
  
  public SquareWave(AudioFormatParameters01 audioParams,
               String[] args,
               byte[] melody){
    super(audioParams,args,melody);
  }//end constructor
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

</section>
<section id="h31004">
<title>
<emphasis id="Beginning_of_the_getMelody_method" effect="bold">

Beginning of the getMelody 
	method

</emphasis>


</title>




<para id="p1021">
This method returns an array containing three seconds of monaural audio data for a square wave at 1000 
Hz.

</para>




<para id="p1022">
<link id="a1052" target-id="Listing_2">

Listing 2

</link>

 shows the beginning of the overridden 

<emphasis id="strong1013" effect="bold">
getMelody

</emphasis>
 
method. 

<emphasis id="em1020" effect="italics">
(Recall that an abstract version of this method is inherited from 
the class named 

<emphasis id="strong1014" effect="bold">
AudioSignalGenerator02 

</emphasis>
-- see 

<link id="a1053" target-id="Listing_9">

Listing 9

</link>

)

</emphasis>
</para>




<para id="p1023">
The code in 

<link id="a1054" target-id="Listing_2">

Listing 2

</link>

 is essentially the same as the corresponding 

<emphasis id="strong1015" effect="bold">

WhiteNoise

</emphasis>
 code from the earlier module. Therefore, I won't discuss it 
further in this module.

</para>




	

<table id="table1001" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

. Beginning of the getMelody method.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">



<code id="pre1001" display="block">
  byte[] getMelody(){
    //Recall that the default for channels is 1 for mono.
    System.out.println("audioParams.channels = " + audioParams.channels);
    
    //Each channel requires two 8-bit bytes per 16-bit sample.
    int bytesPerSampPerChan = 2;
    
    //Override the default sample rate. Allowable sample rates are 8000,11025,
    // 16000,22050,44100 samples per second.
    audioParams.sampleRate = 8000.0F;
    
    // Set the length of the melody in seconds
    double lengthInSeconds = 3.0;
    
    //Create an output data array sufficient to contain the melody
    // at "sampleRate" samples per second, "bytesPerSampPerChan" bytes per
    // sample per channel and "channels" channels.
    melody = new byte[(int)(lengthInSeconds*audioParams.sampleRate*
                                    bytesPerSampPerChan*audioParams.channels)];
    System.out.println("melody.length = " + melody.length);
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




</section>
<section id="h31005">
<title>
<emphasis id="Required_audio_data_format" effect="bold">

Required audio data format

</emphasis>


</title>




<para id="p1024">
As you learned in earlier modules, an object of the 

<emphasis id="strong1016" effect="bold">
AudioPlayOrFile01

</emphasis>
 
class accepts an object of the 

<emphasis id="strong1017" effect="bold">
AudioFormatParameters01

</emphasis>
 class along 
with an audio data array object of type 

<emphasis id="strong1018" effect="bold">
byte[]

</emphasis>
 and a 

<emphasis id="strong1019" effect="bold">

String

</emphasis>
 object for a file name and uses that information to either play 
the data in the audio array immediately or write it into an audio output file of 
type AU.

</para>




<para id="p1025">
Normally the audio data array must be formatted in a specific way as 
partially defined by the contents of the 

<emphasis id="strong1020" effect="bold">
AudioFormatParameters01

</emphasis>
 
object. In the case of white noise, however, there is no order or organization 
to the bytes of audio data. Therefore, our only requirement was to ascertain that 
the proper number of signed random byte values were used to populate the array.

</para>




<para id="p1026">
That is not the case in this module. Our audio data is 
organized and we must meet the required 
format for the audio array.

</para>




<para id="p1027">
Given the values that we are using in the 

<emphasis id="strong1021" effect="bold">
AudioFormatParameters01

</emphasis>
 
object, the format requirements for monaural and stereo are shown below. 

<emphasis id="em1021" effect="italics">

(Note that in both cases, each audio value must be a signed 16-bit value decomposed into a pair of 8-bit bytes.)

</emphasis>
</para>




<section id="h41000">
<title>
<emphasis id="Monaural_channels__1" effect="bold">

Monaural, channels = 1

</emphasis>


</title>




<para id="p1028">
For mono, each successive pair of bytes in the array must contain one 
audio value. The element with the lower index must contain the most significant 
eight bits of the 16-bit audio value.

</para>




</section>
<section id="h41001">
<title>
<emphasis id="Stereo_channels__2" effect="bold">

Stereo, channels = 2

</emphasis>


</title>




<para id="p1029">
For stereo, alternating pairs of bytes must each contain one audio value in the 
same byte order as for mono. One pair of bytes is routed to the left speaker 
and the other pair of bytes is routed to the right speaker 

<emphasis id="em1022" effect="italics">
(almost)

</emphasis>
 
simultaneously.

</para>




<para id="p1030">
Within the four bytes, the pair with the lowest index is routed to the left 
speaker and the other pair is routed to the right speaker.

</para>




	

</section>
</section>
<section id="h31006">
<title>
<emphasis id="Generating_the_square_wave" effect="bold">

Generating the square wave

</emphasis>


</title>




<section id="h41002">
<title>
<emphasis id="Local_working_variables" effect="bold">

Local working variables

</emphasis>


</title>






<para id="p1031">
<link id="a1055" target-id="Listing_3">

Listing 3

</link>

 declares three working variables. The variable named 

<emphasis id="strong1022" effect="bold">
val

</emphasis>
 
specifies the amplitude of the square wave. You will see what the other two 
variable are used for later.

</para>


	

<table id="table1002" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

. Local working variables.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">



<code id="pre1002" display="block">
    int val = 8000;//amplitude value of square wave
    byte byteLow = 0;
    byte byteHigh = 0;
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

</section>
<section id="h41003">
<title>
<emphasis id="Set_the_frequency_of_the_square_wave" effect="bold">

Set the frequency of the 
	square wave

</emphasis>


</title>




<para id="p1032">
<link id="a1056" target-id="Listing_4">

Listing 4

</link>

 shows the beginning of a 

<emphasis id="strong1023" effect="bold">
for

</emphasis>
 loop that is used to 
populate the audio data array. Note that this 

<emphasis id="strong1024" effect="bold">
for

</emphasis>
 loop traverses the 
array in steps of two bytes per iteration. This will be important later when we 
examine the code that populates the array.

</para>




	

<table id="table1003" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

. Set the frequency of the square wave.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">



<code id="pre1003" display="block">
    for(int cnt = 0;cnt &lt; melody.length; cnt+=2){

      //Change this value to change the fundamental frequency.
      //8 results in 1000 Hz
      //16 results in 500 Hz
      //32 results in 250 Hz, etc.
      
      if(cnt % 8 == 0){
        //Change sign
        val = -val;
      }//end if
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1033">
The amplitude of the square wave switches back and forth between 

<emphasis id="strong1025" effect="bold">
val

</emphasis>
 
and 

<emphasis id="strong1026" effect="bold">
-val

</emphasis>
 on a regular basis. The value used with the modulus 
operator in the 

<emphasis id="strong1027" effect="bold">
if

</emphasis>
 statement in 

<link id="a1057" target-id="Listing_4">

Listing 4

</link>

 determines how often 
that switch will take place. If it switches every eight bytes at a sampling 
rate of 8000 samples per second, the resulting fundamental frequency will be 
1000 Hz. The comments in 

<link id="a1058" target-id="Listing_4">

Listing 4

</link>

 indicate other possibilities.

</para>







	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1028" effect="bold">
Do the 
				math:

</emphasis>



<code id="pre1004" display="block">(8 bytes/switch)*(2 switches/cycle)*(1 samp/2 bytes)*
                                         (1 sec/8000 samp) = 0.001 sec/cycle
or 1000 cycles/sec or 1000 Hz
</code>



				

</note>

			


		



	



	

</section>
<section id="h41004">
<title>
<emphasis id="Decompose_into_two_bytes" effect="bold">

Decompose val into two bytes

</emphasis>


</title>




<para id="p1034">
<link id="a1059" target-id="Listing_5">

Listing 5

</link>

 decomposes the 16 least significant bits 

<emphasis id="em1023" effect="italics">
(LSB)

</emphasis>
 of 

<emphasis id="strong1029" effect="bold">
val

</emphasis>
 into a pair of 8-bit bytes, 
discarding the 16 most significant bits 

<emphasis id="em1024" effect="italics">
(MSB)

</emphasis>
 of the 32-bit 

<emphasis id="strong1030" effect="bold">
int

</emphasis>
 
value.

</para>




	

<table id="table1004" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1004">

			

<row id="tr1008">

				

<entry id="th1004">
<emphasis id="Listing_5" effect="bold">

Listing 5

</emphasis>

. Decompose val into two bytes.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1004">

			

<row id="tr1009">

				

<entry id="td1004">



<code id="pre1005" display="block">
      byteLow = (byte)val;//discard all but 8 lsb
      byteHigh = (byte)(val &gt;&gt; 8);//shift right 8 and discard all but 8 lsb
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1035">
The first statement in 

<link id="a1060" target-id="Listing_5">

Listing 5

</link>

 uses a (byte) cast to discard the 24 MSB 
	of a copy of 

<emphasis id="strong1031" effect="bold">
val

</emphasis>
 and to store the remaining eight LSB in 
	the variable named 

<emphasis id="strong1032" effect="bold">
byteLow

</emphasis>
. This does not modify 
	the value actually stored in the variable named 

<emphasis id="strong1033" effect="bold">

	val

</emphasis>
.

</para>




<para id="p1036">
The second statement in 

<link id="a1061" target-id="Listing_5">

Listing 5

</link>

 begins by shifting a copy of 

<emphasis id="strong1034" effect="bold">
val

</emphasis>
 
8 bits to the right, thereby discarding the eight LSB and keeping the remaining 
24 MSB of the original 32 bits. This operation extends the sign bit to the right 
in conjunction with the shift.

</para>




<para id="p1037">
Then the second statement uses a (byte) cast to discard the 24 MSB of the 
same copy of 

<emphasis id="strong1035" effect="bold">
val

</emphasis>
 and to store the remaining eight LSB in the 
variable named 

<emphasis id="strong1036" effect="bold">
byteHigh

</emphasis>
.

</para>




<para id="p1038">
There is a more elegant, but much more cryptic way to do this, which I will 
show you in a future module. I'm using this approach at this time because it 
should be easy for you to understand what is actually happening.

</para>




</section>
<section id="h41005">
<title>
<emphasis id="Populate_the_audio_data_array" effect="bold">

Populate the audio data array

</emphasis>


</title>




<para id="p1039">
<link id="a1062" target-id="Listing_6">

Listing 6

</link>

 assigns the values of 

<emphasis id="strong1037" effect="bold">
byteHigh

</emphasis>
 and 

<emphasis id="strong1038" effect="bold">
byteLow

</emphasis>
 to the elements in the 
audio data array in the required order described


<link id="a1063" target-id="Required_audio_data_format">

above

</link>

. Recall that the for loop 
iterates through the array two bytes per iteration. Thus, each iteration 
produces one audio sample.

</para>


	


	

<table id="table1005" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1005">

			

<row id="tr1010">

				

<entry id="th1005">
<emphasis id="Listing_6" effect="bold">

Listing 6

</emphasis>

. Populate the audio data 
				array.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1005">

			

<row id="tr1011">

				

<entry id="td1005">



<code id="pre1006" display="block">
      melody[cnt] = byteHigh;
      melody[cnt + 1] = byteLow;

    }//end for loop
      
    return melody;
    
  }//end method getMelody
  //-------------------------------------------------------------------------//

}//end class SquareWave 
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1040">
<link id="a1064" target-id="Listing_6">

Listing 6

</link>

 also signals the end of the 

<emphasis id="strong1039" effect="bold">
for

</emphasis>
 loop and 
	returns the populated array's reference 
	after the loop terminates.

</para>




<para id="p1041">
Finally, 

<link id="a1065" target-id="Listing_6">

Listing 6

</link>

 signals the end of the 

<emphasis id="strong1040" effect="bold">

getMelody

</emphasis>
 method and the end of the 

<emphasis id="strong1041" effect="bold">
SquareWave

</emphasis>
 class.

</para>




</section>
</section>
</section>
</section>
<section id="h11004">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>





<para id="p1042">
I encourage you to copy the code from 

<link id="a1066" target-id="Listing_7">

Listing 7

</link>

 through 

<link id="a1067" target-id="Listing_11">

Listing 11

</link>

. Compile the code and 
execute it. Experiment with the code, 
making changes, and observing the results of your changes. Make certain that you 
can explain why your changes behave as they do.

</para>


	

</section>
<section id="h11005">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1043">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1042" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1012" list-type="bulleted">

					

<item id="li1045">
Module name: Jbs2020-Square Wave Sound

</item>


					

<item id="li1046">
File: Jbs2020.htm


</item>


					

<item id="li1047">
Published: 08/27/14

</item>


					

<item id="li1048">
Revised: 09/29/15

</item>


				

</list>


				

</note>

			


		



	






	

<note id="note1002" type="">


		


			


				

<emphasis id="strong1043" effect="bold">
Disclaimers:

</emphasis>
<para id="p1044">
<emphasis id="strong1044" effect="bold">
Financial

</emphasis>
: 
				Although the 

<emphasis id="strong1045" effect="bold">
OpenStax CNX

</emphasis>
 site makes it 
				possible for you to download a PDF file for the collection that 
				contains this module at no charge, and also makes it possible 
				for you to purchase a pre-printed version of the PDF file, you 
				should be aware that some of the HTML elements in this module 
				may not translate well into PDF.

</para>


				

<para id="p1045">
You also need to know that Prof. Baldwin receives no 
				financial compensation from 

<emphasis id="strong1046" effect="bold">
OpenStax CNX 

</emphasis>
even 
				if you purchase the PDF version of the collection.

</para>


				

<para id="p1046">
In the past, unknown individuals have copied Prof. Baldwin's 
				modules from cnx.org, converted them to Kindle books, and placed 
				them for sale on Amazon.com showing Prof. Baldwin as the author. 
				Prof. Baldwin neither receives compensation for those sales nor 
				does he know who does receive compensation. If you purchase such 
				a book, please be aware that it is a copy of a collection that 
				is freely available on 

<emphasis id="strong1047" effect="bold">
OpenStax CNX

</emphasis>
 and that it 
				was made and published without the prior knowledge of Prof. 
				Baldwin.

</para>


				

<para id="p1047">
<emphasis id="strong1048" effect="bold">
Affiliation

</emphasis>
: Prof. Baldwin is a professor of 
				Computer Information Technology at Austin Community College in 
				Austin, TX. 

</para>


				

</note>

			


		



	





</section>
<section id="h11006">
<title>
<emphasis id="Complete_program_listing" effect="bold">

Complete program listings

</emphasis>


</title>




<para id="p1048">
Source code for the classes required by this program is provided below.

</para>




	

<table id="table1006" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1006">

			

<row id="tr1012">

				

<entry id="th1006">
<emphasis id="Listing_7" effect="bold">

Listing 7

</emphasis>

. The class named AudioFormatParameters01.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1006">

			

<row id="tr1013">

				

<entry id="td1006">



<code id="pre1007" display="block">
/*File AudioFormatParameters01.java
Copyright 2014, R.G.Baldwin
Revised 08/16/14
******************************************************************************/

public class AudioFormatParameters01{
  //The following are audio format parameters used by the Java audio system.
  // They may be modified by the signal generator at runtime.  Values allowed
  // by Java SDK 1.4.1 are shown in comments.
  public float sampleRate = 16000.0F;
  //Allowable 8000,11025,16000,22050,44100
  public int sampleSizeInBits = 16;
  //Allowable 8,16
  public int channels = 1;
  //Allowable 1,2
  public boolean signed = true;
  //Allowable true,false
  public boolean bigEndian = true;
  //Allowable true,false
}//end class AudioFormatParameters01
//===========================================================================//
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1049">
..

</para>





	

<table id="table1007" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1007">

			

<row id="tr1014">

				

<entry id="th1007">
<emphasis id="Listing_8" effect="bold">

Listing 8

</emphasis>

. The class named AudioPlayOrFile01.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1007">

			

<row id="tr1015">

				

<entry id="td1007">



<code id="pre1008" display="block">
/*File AudioPlayOrFile01.java
Copyright 2014, R.G.Baldwin
Revised 08/16/14
******************************************************************************/
import javax.sound.sampled.*;
import java.io.*;
import java.util.*;

public class AudioPlayOrFile01{
  //An object of this class is used to either play the sound in the array
  // named melody or to write it into an audio file of type AU.
  
  //The following are general instance variables used to create a
  // SourceDataLine object.
  AudioFormat audioFormat;
  AudioInputStream audioInputStream;
  SourceDataLine sourceDataLine;

  AudioFormatParameters01 audioParams;
  byte[] melody;
  String playOrFile;//"play" to play immediately or a fileName to write
                    // an output file of type AU.
  //-------------------------------------------------------------------------//
  
  public AudioPlayOrFile01(AudioFormatParameters01 audioParams,
                           byte[] melody,
                           String playOrFile){//constructor

    this.audioParams = audioParams;
    this.melody = melody;
    this.playOrFile = playOrFile;
  }//end constructor
  //-------------------------------------------------------------------------//

  //This method plays or files the synthetic audio data that has been generated
  // and saved in an array.
  void playOrFileData() {
    try{
      //Get an input stream on the byte array containing the data
      InputStream byteArrayInputStream = new ByteArrayInputStream(melody);

      //Get the required audio format
      audioFormat = new AudioFormat(audioParams.sampleRate,
                                    audioParams.sampleSizeInBits,
                                    audioParams.channels,
                                    audioParams.signed,
                                    audioParams.bigEndian);

      //Get an audio input stream from the ByteArrayInputStream
      audioInputStream = new AudioInputStream(
                                     byteArrayInputStream,
                                     audioFormat,
                                     melody.length/audioFormat.getFrameSize());

      //Get info on the required data line
      DataLine.Info dataLineInfo = new DataLine.Info(SourceDataLine.class,
                                                     audioFormat);

      //Get a SourceDataLine object
      sourceDataLine = (SourceDataLine)AudioSystem.getLine(dataLineInfo);
                                   
      //Decide whether to play the audio data immediately, or to write it
      // into an audio file of type AU based on the incoming parameter named
      // playOrFile.
      if(playOrFile.toUpperCase().equals("PLAY")){
        //Create a thread to play back the data and start it running.  It will
        // run until all the data has been played back
        new PlayAudioThread().start();
      }else{
        //Write the data to an output file with the name provided by the
        // incoming parameter named playOrFile.
        try{
          AudioSystem.write(audioInputStream,
                            AudioFileFormat.Type.AU,
                            new File(playOrFile + ".au"));
        }catch (Exception e) {
          e.printStackTrace();
          System.exit(0);
        }//end catch
      }//end else
    }catch (Exception e) {
      e.printStackTrace();
      System.exit(0);
    }//end catch
  }//end playOrFileData
//===========================================================================//

  //Inner class to play back the data that was saved.
  class PlayAudioThread extends Thread{
    //This is a working buffer used to transfer the data between the
    // AudioInputStream and the SourceDataLine.  The size is rather arbitrary.
    byte playBuffer[] = new byte[16384];
  
    public void run(){
      try{
        //Open and start the SourceDataLine
        sourceDataLine.open(audioFormat);
        sourceDataLine.start();
  
        int cnt;
        //Get beginning of elapsed time for playback
        long startTime = new Date().getTime();
  
        //Transfer the audio data to the speakers
        while((cnt = audioInputStream.read(
                                       playBuffer,0,playBuffer.length)) != -1){
          //Keep looping until the input read method returns -1 for empty
          // stream.
          if(cnt &gt; 0){
            //Write data to the internal buffer of the data line where it will
            // be delivered to the speakers in real time
            sourceDataLine.write(playBuffer, 0, cnt);
          }//end if
        }//end while
  
        //Block and wait for internal buffer of the SourceDataLine to become
        // empty.
        sourceDataLine.drain();
  
  
        //Get and display the elapsed time for the previous playback.
        int elapsedTime = (int)(new Date().getTime() - startTime);
        System.out.println("Elapsed time: " + elapsedTime);
  
        //Finish with the SourceDataLine
        sourceDataLine.stop();
        sourceDataLine.close();
      }catch (Exception e) {
        e.printStackTrace();
        System.exit(0);
      }//end catch
  
    }//end run
  }//end inner class PlayAudioThread
  //=========================================================================//
}//end AudioPlayOrFile01 class
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1050">
..

</para>





	

<table id="table1008" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1008">

			

<row id="tr1016">

				

<entry id="th1008">
<emphasis id="Listing_9" effect="bold">

Listing 9

</emphasis>

. The class named AudioSignalGenerator02.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1008">

			

<row id="tr1017">

				

<entry id="td1008">



<code id="pre1009" display="block">
/*File AudioSignalGenerator02.java
Copyright 2014, R.G.Baldwin
Revised 08/19/14

This is an abstract class that serves as the base class for several other 
classes that can be used to create melodies of different types.
******************************************************************************/

import java.io.*;
import java.nio.*;
import java.util.*;

public abstract class AudioSignalGenerator02{
  
  //Note:  This class can only be used to generate signed 16-bit data.
  ByteBuffer byteBuffer;
  String[] args;
  byte[] melody;
  AudioFormatParameters01 audioParams;
  //-------------------------------------------------------------------------//
  
  //Constructor
  public AudioSignalGenerator02(AudioFormatParameters01 audioParams,
                                String[] args,
                                byte[] melody){
    this.audioParams = audioParams;
    this.args = args;
    this.melody = melody;
  }//end constructor
  //-------------------------------------------------------------------------//

  //The following abstract method must be overridden in a subclass for this
  // class to be of any value.
  abstract byte[] getMelody();
}//end AudioSignalGenerator02
//===========================================================================//

</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1051">
..

</para>





	

<table id="table1009" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1009">

			

<row id="tr1018">

				

<entry id="th1009">
<emphasis id="Listing_10" effect="bold">

Listing 10

</emphasis>

. The class named MusicComposer05.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1009">

			

<row id="tr1019">

				

<entry id="td1009">



<code id="pre1010" display="block">
/*File MusicComposer05.java
Copyright 2014, R.G.Baldwin
Revised 08/22/14

This program works in conjunction with the following classes to create and play
three seconds of monaural audio based on a square wave at 1000 cycles per
second.

SquareWave
AudioSignalGenerator02
AudioPlayOrFile01
AudioFormatParameters01

The sound can be played immediately or can be saved in an audio file of 
type AU for playback later. You should be able to play the audio file with any
standard media player that can handle the AU file type

Tested using JDK 1.8 under Win 7.
******************************************************************************/

public class MusicComposer05{
  //Instantiate an object containing audio format parameters with predefined
  // values. They may be modified by the signal generator at runtime. Values
  // allowed by Java SDK 1.4.1 are shown in comments in the class definition.
  AudioFormatParameters01 audioParams = new AudioFormatParameters01();
  
  //A buffer to hold the audio data that will be played or filed.
  byte[] melody;
  
  //A place to store the incoming args array.
  String[] args; 
  //-------------------------------------------------------------------------//

  //Command-line parameter (only one parameter is needed)
  //If "play", the sound will be played immediately. Otherwise, the string will
  // be used as a filename for an audio file of type AU. In the latter case,
  // it must be a string that would be valid as a file name for the operating
  // system in use.  
  public static void main(String[] args){
    //Instantiate a new object of this class.
    new MusicComposer05(args);
  }//end main
  //-------------------------------------------------------------------------//
  
  public MusicComposer05(String[] args){//constructor
    //Save the args array.
    this.args = args;
    
    //Create default args data if no args data is provided on the command line.
    if(args.length == 0){
      this.args = new String[1];
      this.args[0] = "play";//Play the melody immediately
    }//end if

    //Get a populated array containing audio data for the square wave.
    SquareWave squareWave = new SquareWave(audioParams,this.args,melody);
    melody = squareWave.getMelody();

    //Play or file the audio data
    new AudioPlayOrFile01(audioParams,melody,this.args[0]).playOrFileData();
  }//end constructor
  //-------------------------------------------------------------------------//
}//end class MusicComposer05.java
//===========================================================================//
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1052">
..

</para>





	

<table id="table1010" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1010">

			

<row id="tr1020">

				

<entry id="th1010">
<emphasis id="Listing_11" effect="bold">

Listing 11

</emphasis>

. The class named SquareWave.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1010">

			

<row id="tr1021">

				

<entry id="td1010">



<code id="pre1011" display="block">
/*File SquareWave.java
Copyright 2014, R.G.Baldwin
Revised 08/22/14

This class can be used to create a square wave with 1000 cycles per second
******************************************************************************/

import java.io.*;
import java.nio.*;
import java.util.*;

public class SquareWave extends AudioSignalGenerator02{
  
  public SquareWave(AudioFormatParameters01 audioParams,
               String[] args,
               byte[] melody){
    super(audioParams,args,melody);
  }//end constructor
  //-------------------------------------------------------------------------//
  

  //This method returns an array containing three seconds of a square wave
  // at 1000 cycles per second.

  byte[] getMelody(){
    //Recall that the default for channels is 1 for mono.
    System.out.println("audioParams.channels = " + audioParams.channels);
    
    //Each channel requires two 8-bit bytes per 16-bit sample.
    int bytesPerSampPerChan = 2;
    
    //Override the default sample rate. Allowable sample rates are 8000,11025,
    // 16000,22050,44100 samples per second.
    audioParams.sampleRate = 8000.0F;
    
    // Set the length of the melody in seconds
    double lengthInSeconds = 3.0;
    
    //Create an output data array sufficient to contain the melody
    // at "sampleRate" samples per second, "bytesPerSampPerChan" bytes per
    // sample per channel and "channels" channels.
    melody = new byte[(int)(lengthInSeconds*audioParams.sampleRate*
                                    bytesPerSampPerChan*audioParams.channels)];
    System.out.println("melody.length = " + melody.length);

    int val = 8000;//amplitude value of square wave
    byte byteLow = 0;
    byte byteHigh = 0;
    for(int cnt = 0;cnt &lt; melody.length; cnt+=2){
      
      if(cnt % 8 == 0){
        //Change sign
        val = -val;
      }//end if
      
      //Create two bytes that contain a 16-bit representation of the value.
      byteLow = (byte)val;//discard all but 8 lsb
      byteHigh = (byte)(val &gt;&gt; 8);//shift right 8 and discard all but 8 lsb
      
      //Deposit the bytes into the array
      melody[cnt] = byteHigh;
      melody[cnt + 1] = byteLow;

    }//end for loop    
    return melody;
  }//end method getMelody
  //-------------------------------------------------------------------------//

}//end class SquareWave 
//===========================================================================//
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1053">
-end- 

</para>






</section>
</content>




</document>